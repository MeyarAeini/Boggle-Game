@page "/boggle"
@inject BoggleGame.Client.Services.IBoggleResolver boggleResolver
@using BoggleGame.Dto;
@using BoggleGame.Client.Services;

<PageTitle>Boggle Game</PageTitle>

<h1>Boggle Game</h1>

<div class="container">
  <div class="toppane">
    <InputSelect ValueExpression="@(()=>selectedDictionary)" 
                Value="@selectedDictionary" 
                ValueChanged="@((string value) => SelectedDictionaryChanged(value))">
        @if(dictionaries!=null)
            @foreach (var dictionary in dictionaries)
            {
                <option value="@dictionary">@dictionary</option>
            }
    </InputSelect>

    <InputSelect ValueExpression="@(()=>selectedBoard)" 
                Value="@selectedBoard" 
                ValueChanged="@((string value) => SelectedBoardChanged(value))">

        @if(boards!=null)
            @foreach (var board in boards)
            {
                <option value="@board">@board</option>
            }
    </InputSelect>
  </div>
  <div class="d-flex">
    <div class="leftpane">
        @if (words == null)
        {
            <p><em>Loading valid words...</em></p>
        }
        else
        {
            <table class="path">
                <tbody>
                    @foreach (var wrd in words)
                    {
                        <tr @onclick="@(() => OnPathSelected(wrd))"> 
                            <td>@wrd</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="middlepane">
        @if (board == null)
        {
            <p><em>Loading the board...</em></p>
        }
        else
        {
            <table>
                <tbody>
                    @foreach (var row in board)
                    {
                        <tr>
                            @foreach (var cell in row)
                            {
                                <td class="@( (cell.Selected) ? "path" : "" )">@cell.DisplayValue</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>   
        }     
    </div>
    <div class="rightpane">
      <h1></h1>
    </div>
  </div>
</div>

@code {
    private string selectedDictionary;
    private IEnumerable<string>? dictionaries;
    private string selectedBoard;
    private IEnumerable<string>? boards;
    private BoardItem[][]? board;
    //private IDictionary<string,HashSet<WordPath>>? pathes;
        private IEnumerable<string>? words;

    protected override async Task OnInitializedAsync()
    {
        dictionaries = await boggleResolver.GetDictionaries();
        boards = await boggleResolver.GetBoards();
        selectedBoard = boards?.FirstOrDefault();
        selectedDictionary = "yawl";
        await LoadSelectedBoard();
        await LoadValidWords();
    }
    private async Task SelectedBoardChanged(string boardName)
    {
        selectedBoard = boardName;
        await LoadSelectedBoard();
        await LoadValidWords();
    }
    private async Task SelectedDictionaryChanged(string dictionaryName)
    {
        selectedDictionary = dictionaryName;       
        await LoadValidWords();
    }
    private async Task LoadSelectedBoard(){
        board = null;
        if(string.IsNullOrEmpty(selectedBoard)) return;
        board = await boggleResolver.GetBoard(selectedBoard);
    }
    private async Task LoadValidWords(){
        words = null;
        if(string.IsNullOrEmpty(selectedBoard) || string.IsNullOrEmpty(selectedDictionary)) return;
        words = await boggleResolver.Solve(selectedDictionary,selectedBoard);
    }
    private void OnPathSelected(string path)
    {
        @* if(board!=null)
            board = boggleResolver.SetBoard(board,path); *@
    }
}
